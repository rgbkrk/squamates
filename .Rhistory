fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
a<- list.files(path='rooted/', pattern="*.txt", full.names=TRUE)
for (x in a){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
    f3<-paste(x, ".tre", sep="") 
    write.tree(phy, file=f3)
}
library(ggplot)
data <- read.csv('./bl', row.names=1)
data
m <- ggplot(data, aes(x = Tree.Length))
m
m + geom_density()
m+ geom_density(aes(fill=factor(Method)), size=2)
m+ geom_density(aes(fill=factor(Method)), size=1)
m+ geom_density() + geom_vline(x=108517.25174000063)
m+ geom_density() + geom_vline(x=108517.25174000063, colour = 'teal')
m+ geom_density() + geom_vline(x=108517.25174000063, colour = 'blue')
m+ geom_density() + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(fill='Method, alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(fill='Method, alpha=I(.25)) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(fill='Method, alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(fill='Method, alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(fill='Method', alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m <- ggplot(data, aes(x = Tree.Length, fill=Method))
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = '"#FF9999"') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = '#FF9999') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = '#FF9999') + geom_vline(x=92039.92632900033, colour='#56B4E9')
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = '#FF9999') + geom_vline(x=92039.92632900033, colour='#56B4E9') +theme_bw()
library(diversitree)
library(ape)
#For this analysis, we use a data file that's been made a little smaller than the 8000-taxon data set. Load it.
data <- read.csv('./PyronParityData.csv', row.names=1)
# Initialize vectors. These will be used for formatting output.
output_vector <- vector()
ovip_root_vector <- vector()
vivip_root_vector <- vector()
rootomy <- vector()
a<- list.files(path='./', pattern="*.dated", full.names=TRUE)
a
a<- list.files(path='./', pattern="*2.dated", full.names=TRUE)
a
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
print(st[1,])
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F, edge.color=p)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "model_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "ovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "vivip_support.csv", sep = ",", col.names = FALSE, append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
model_fit(a)
a<- list.files(path='./', pattern="*.dated", full.names=TRUE)
a
model_fit(a)
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "model_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "ovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "vivip_support.csv", sep = ",", col.names = FALSE, append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
a<- list.files(path='./', pattern="*.dated", full.names=TRUE)
a
a<- list.files(path='.', pattern="*.dated", full.names=TRUE)
a
model_fit(A)
model_fit(a)
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "model_params.csv",  sep = ",", append=TRUE)
lapply(ovip_root_vector, write, "ovip_support.csv", sep = ",", append=TRUE)
lapply(vivip_root_vector, write, "vivip_support.csv", sep = ",",  append=TRUE)
}
#Call the function if you want
model_fit(a)
plotBranchbyTrait(pruned.tree,st,method="tips")
library(phytools)
plotBranchbyTrait(pruned.tree,st,method="tips")
plotBranchbyTrait(pruned.tree,st,method="nodes")
plotBranchbyTrait(pruned.tree,st,method="nodes", edge.width=1, edge.lty=1,)
plotBranchbyTrait(pruned.tree,st,method="nodes", edge.width=1, edge.lty=1)
plotBranchbyTrait(pruned.tree,st,method="nodes", edge.width=1, edge.lty=1, show.tip.labels=False)
plotBranchbyTrait(pruned.tree,st,method="nodes", edge.width=1, edge.lty=1, show.tip.labels=FALSE)
plotBranchbyTrait(pruned.tree,st,method="nodes", edge.width=1, edge.lty=1, show.tip.label=FALSE)
plotBranchbyTrait(pruned.tree,st,method="nodes", edge.width=1, edge.lty=1, show.tip.label=FALSE, legend=FALSE)
plotBranchbyTrait(pruned.tree,type='fan', st,method="nodes", edge.width=1, edge.lty=1, show.tip.label=FALSE, legend=FALSE)
plotBranchbyTrait(pruned.tree,type='fan', st,method="nodes", edge.width=1, edge.lty=1, show.tip.label=FALSE, legend=FALSE, palette='grey')
plotBranchbyTrait(pruned.tree,type='fan', st,method="nodes", edge.width=1, edge.lty=1, show.tip.label=FALSE, legend=FALSE, palette='gray')
col.vec
colors<-brewer.pal(9,"RdBu")
col.vec <-colors[c(1,9,2,8,3,7,4,6)]
plotBranchbyTrait(pruned.tree,type='fan', st,method="nodes", edge.width=1, edge.lty=1, show.tip.label=FALSE, legend=FALSE)
library(RColorBrewer)
colors<-brewer.pal(9,"RdBu")
col.vec <-colors[c(1,9,2,8,3,7,4,6)]
plotBranchbyTrait(pruned.tree,type='fan', st,method="nodes", edge.width=1, edge.lty=1, show.tip.label=FALSE, legend=FALSE, palette=col.vec)
plotBranchbyTrait(pruned.tree,type='fan', st,method="nodes", edge.width=1, edge.lty=1, show.tip.label=FALSE, legend=FALSE, palette='rainbow')
plotBranchbyTrait(pruned.tree,type='fan', st,method="nodes", edge.width=1, edge.lty=1, show.tip.label=FALSE, legend=FALSE, palette='heat.colors')
plotBranchbyTrait(pruned.tree,type='fan', st,method="nodes", edge.width=1, edge.lty=1, show.tip.label=FALSE, legend=FALSE)
plotBranchbyTrait(pruned.tree,type='fan', st,method="nodes", edge.width=1, edge.lty=1, show.tip.label=FALSE, legend=T)
library(diversitree)
library(ape)
#For this analysis, we use a data file that's been made a little smaller than the 8000-taxon data set. Load it.
data <- read.csv('./PyronParityData.csv', row.names=1)
phy <- read.tree('ExaML_result.SquamataPyron.MLE.2b')
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
pruned.tree
pruned.tree.drop.tip('Sphenodon_punctatus)
pruned.tree.drop.tip('Sphenodon_punctatus')
pruned.tree.droptip('Sphenodon_punctatus')
drop.tip('Sphenodon_punctatus')
library('ape')
drop.tip('Sphenodon_punctatus')
pruned.tree.drop.tip('Sphenodon_punctatus')
drop.tip(pruned.tree,'Sphenodon_punctatus')
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
  phy <- multi2di(phy, random = TRUE)
func <- make.bisse(pruned.tree, no_na)
  phy <- multi2di(pruned.tree, random = TRUE)
func <- make.bisse(phy, no_na)
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
x <- 'ExaML_result.SquamataPyron.MLE.2b'
phy <- read.tree(x)
pruned.tree<-drop.tip(phy, c(setdiff(phy$tip.label, row.names(data)),'Sphenodon_punctatus'))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
func <- make.bisse(pruned.tree, no_na)
phy <- read.tree(x)
data <- read.csv('./PyronParityData.csv', row.names=1)
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
func <- make.bisse(pruned.tree, no_na)
write.tree('no_speno')
write.tree(phy, 'no_speno')
x <- 'ExaML_result.SquamataPyron.MLE.10b.dated'
pruned.tree<-drop.tip(phy, c(setdiff(phy$tip.label, row.names(data)), 'Sphenodon_punctatus'))
  phy <- multi2di(phy, random = TRUE)
pruned.tree<-drop.tip(phy, c(setdiff(phy$tip.label, row.names(data)), 'Sphenodon_punctatus'))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
pruned.tree<-drop.tip(phy, c(setdiff(phy$tip.label, row.names(data)), 'Sphenodon_punctatus'))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
data <- read.csv('./PyronParityData.csv', row.names=1)
func <- make.bisse(pruned.tree, no_na)
data
data.head()
data.head
head(data)
func <- make.bisse(pruned.tree, no_na)
data <- read.csv('./PyronParityData.csv', row.names=1)
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
pruned.tree<-drop.tip(phy, c(setdiff(phy$tip.label, row.names(data)), 'Sphenodon_punctatus'))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
fit_bisse
st <- asr.marginal(func, coef(fit_bisse))
st
st[,1]
st[,100]
st[,2500]
st[,1]
st[,2]
st[,3949]
prt
prt(pruned.tree)
install.pakcages('biogeobears')
install.packages('biogeobears')
install.packages('BioGeoBEARS')
library(diversitree)
library(ape)
#For this analysis, we use a data file that's been made a little smaller than the 8000-taxon data set. Load it.
data <- read.csv('./PyronParityData.csv', row.names=1)
# Initialize vectors. These will be used for formatting output.
output_vector <- vector()
ovip_root_vector <- vector()
vivip_root_vector <- vector()
library(diversitree)
a <- tree.bisse
a
a()
a <- tree.bisse()
bisse_fit
a <- tree.bisse(pars = c(1,1,2,2,.5,.5))
a
a <- tree.bisse(pars = c(1,1,2,2,.5,.5),8)
a
pars = c(1,1,2,2,.5,.5)
pars
a <- tree.bisse(pars,max.tips = 8)
a <- tree.bisse(pars,max.t = 8)
a
pars <- c(0.1, 0.2, 0.03, 0.03, 0.01, 0.01)
set.seed(2)
phy <- tree.bisse(pars, max.t = 60, x0 = 0)
phy
phy <- tree.bisse(pars, max.t = 40, x0 = 0)
phy
history.from.sim.discrete(phy, 0:1)
ploy(phy)
plot(phy)
st <- read_csv('states')
st <- read.csv('states')
st <- read.csv('states', row.names=1)
pruned.tree<-drop.tip(phy, c(setdiff(phy$tip.label, row.names(st))))
sorteddata <- st[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
history.from.sim.discrete(phy, no,na)
history.from.sim.discrete(phy, no_na)
 func<-make.bisse(pruned.tree,no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
fit_bisse
str<-asr.marginal(func, coef(fit_bisse))
str
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
fit_plot <- nodelabels(pie=t(str), piecol=1:2, cex=.5)
pruned.tree$node.label <- str[1,]
plot(pruned.tree)
fit_plot <- nodelabels(pie=t(str), piecol=1:2, cex=.5)
pruned.tree$node.label <- str[1,]
plot(pruned.tree)
fit_plot <- nodelabels(pie=t(str), piecol=1:2, cex=.5)
source('./Scripts/bisseunopt.r')
source('./Scripts/bisseunopt.r')
library(diversitree)
library(ape)
#For this analysis, we use a data file that's been made a little smaller than the 8000-taxon data set. Load it.
data <- read.csv('./Data/PyronParityData.csv', row.names=1)
# Initialize vectors. These will be used for formatting output.
output_vector <- vector()
ovip_root_vector <- vector()
vivip_root_vector <- vector()
a<- list.files(path='./Trees/MLE/Dated/', pattern="test*.dated", full.names=TRUE)
a
a<- list.files(path='./Trees/MLE/Dated/', pattern="test*.dated", full.names=TRUE)
a
data
a<- list.files(path='./Trees/MLE/Dated/', pattern="test.*.dated", full.names=TRUE)
a
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
print(phy)
  phy <- multi2di(phy, random = TRUE)
pruned.tree<-drop.tip(phy, c(setdiff(phy$tip.label, row.names(data))))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#Make the BiSSE function
    func<-make.bisse(pruned.tree,no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
st<-asr.marginal(func, coef(fit_bisse))
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
pruned.tree$node.label <- st[1,]
write.tree(pruned.tree, file = x, append = FALSE, digits = 10, tree.names = FALSE)
#Output various parameters: the model and ancestral states 
}
    ovip_table <- as.matrix(t(ovip_root_vector))
    vivip_table <- as.matrix(t(vivip_root_vector))
    model_table <- as.matrix(t(output_vector))
    print(model_table)
write.table(model_table, file = "model_params.csv",  sep = ",", append=TRUE)
write.table(model_table, file = "ovip_support.csv", sep = ",", append=TRUE)
write.table(model_table, file = "vivip_support.csv", sep = ",",  append=TRUE)
}
#Call the function if you want
model_fit(a)
model_fit(a)
model_fit(a)
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
print(phy)
  phy <- multi2di(phy, random = TRUE)
pruned.tree<-drop.tip(phy, c(setdiff(phy$tip.label, row.names(data))))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#Make the BiSSE function
    func<-make.bisse(pruned.tree,no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
#Add root states to a vector of states  
st<-asr.marginal(func, coef(fit_bisse))
print(st)
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
pruned.tree$node.label <- st[1,]
write.tree(pruned.tree, file = x, append = FALSE, digits = 10, tree.names = FALSE)
#Output various parameters: the model and ancestral states 
}
    ovip_table <- as.matrix(t(ovip_root_vector))
    vivip_table <- as.matrix(t(vivip_root_vector))
    model_table <- as.matrix(t(output_vector))
    print(model_table)
write.table(model_table, file = "model_params.csv",  sep = ",", append=TRUE)
write.table(model_table, file = "ovip_support.csv", sep = ",", append=TRUE)
write.table(model_table, file = "vivip_support.csv", sep = ",",  append=TRUE)
}
model_fit(a)
library(diversitree)
library(ape)
#For this analysis, we use a data file that's been made a little smaller than the 8000-taxon data set. Load it.
data <- read.csv('./Data/PyronParityData.csv', row.names=1)
# Initialize vectors. These will be used for formatting output.
output_vector <- vector()
ovip_root_vector <- vector()
vivip_root_vector <- vector()
a<- list.files(path='./Trees/MLE/Dated/', pattern="test.*.dated", full.names=TRUE)
a
x <- a
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
pruned.tree<-drop.tip(phy, c(setdiff(phy$tip.label, row.names(data))))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#Make the BiSSE function
    func <- make.bisse(pruned.tree,no_na)
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
pruned.tree<-drop.tip(phy, c(setdiff(phy$tip.label, row.names(data))))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#Make the BiSSE function
    func <- make.bisse(pruned.tree,no_na)
fit_bisse <- find.mle(func, sp)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
ovip_root_vector <- append(ovip_root_vector, 'Oviparity - Complete Sampling', c(st[,2][1]))
st <- asr.marginal(func, coef(fit_bisse))
ovip_root_vector <- append(ovip_root_vector, 'Oviparity - Complete Sampling', c(st[,2][1]))
ovip_root_vector
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1]))
ovip_root_vector
write.table(ovip_root_vector, file = "unoptimized_model_params.csv", col.names = FALSE, sep = ",", append=TRUE)
ovip_root_vector <- ()
ovip_root_vector <- null
orv <- append(ovip_root_vector,  c(st[,2][1], 'ocs'))
orv
write.table(ovip_root_vector, file = "unoptimized_model_params.csv", col.names = FALSE, sep = ",", append=TRUE)
write.table(orv, file = "unoptimized_model_params.csv", col.names = FALSE, sep = ",", append=TRUE)
orv
orl <- append(orl,  c(st[,2][1], 'ocs'))
orl <-vector()
orl <- append(orl,  c(st[,2][1], 'ocs'))
orl
write.table(orl, file = "unoptimized_model_params.csv", col.names = FALSE, sep = ",", append=TRUE)
    ovip_table <- as.matrix(t(orl))
ovip_table
write.table(ovip_table, file = "unoptimized_model_params.csv", col.names = FALSE, sep = ",", append=TRUE)
orl <- append(orl,  c(st[,2][1], 'ocs'))
    ovip_table <- as.matrix(t(orl))
ovip_table
write.table(ovip_table, file = "unoptimized_model_params.csv", col.names = FALSE, sep = ",", append=TRUE)
ovip_table
new.df <- rbind(orl)
new.df
orl
ork <- vector()
ork <- append(ork,  c(st[,2][1], 'ocs'))
odf <-rbind(ork)
odf
my.df <- data.frame()
my.df <-rbind(ork)
my.df
my.df <-rbind(ork)

ort <- append(ort,  c(st[,2][1], 'ocs'))
ort <- vector()
ort <- append(ort,  c(st[,2][1], 'ocs'))
my.df <-rbind(ort)
my.f
my.df
my.df <-rbind(my.df, ort)
my.df
ovip_root_vector
ork <- c(st[,2][1], 'ocs')
ork
my.df < rbind(my.df,ork)
new.df <- data.frame
my.df <- rbind(my.df,ork)
my.df
