a<- list.files(path='rooted/5', pattern="*.dated", full.names=TRUE)
#Main function to fit model to each tree in BS sample
model_fit <- function(tree_list){
for (x in tree_list){
print(x)
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.nexus(x)
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
#print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
a<- list.files(path='rooted/5', pattern="*.dated", full.names=TRUE)
a
model_fit <- function(tree_list){
for (x in tree_list){
print(x)
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.nexus(x)
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
#print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
phy <- read.tree('rooted/5/0.tre.dated')
phy
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
func <- make.bisse(pruned.tree, no_na)
  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
a<- list.files(path='rooted/5', pattern="*.dated", full.names=TRUE)
#Main function to fit model to each tree in BS sample
model_fit <- function(tree_list){
for (x in tree_list){
print(x)
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.nexus(x)
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
#print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
phy
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
fit_bisse
library(diversitree)
library(ape)
#For this analysis, we use a data file that's been made a little smaller than the 8000-taxon data set. Load it.
data <- read.csv('./PyronParityData.csv', row.names=1)
# Initialize vectors. These will be used for formatting output.
output_vector <- vector()
ovip_root_vector <- vector()
vivip_root_vector <- vector()
a<- list.files(path='examl_trees/1', pattern="*.dated", full.names=TRUE)
#Main function to fit model to each tree in BS sample
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
    pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
#print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
output_vector
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
    pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.05
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
#print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
    pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.1
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
    pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.15
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
    pruned.tree$edge.length[pruned.tree$edge.length == 0] <-mean(pruned.tree$edge.length)
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
    phy$edge.length[phy$edge.length == 0] <-mean(phy$edge.length)
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
    phy$edge.length[phy$edge.length == 0] <- .15
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
    phy$edge.length[phy$edge.length == 0] <- .1
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
    phy$edge.length[phy$edge.length == 0] <- .01
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
model_fit <- function(tree_list){
for (x in tree_list){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
 #   phy$edge.length[phy$edge.length == 0] <- .01
    phy<- compute.brlen(phy, method="Grafen")
pruned.tree<-drop.tip(phy, setdiff(phy$tip.label, row.names(data)))
sorteddata <- data[phy$tip.label, ]
no_na <- na.omit(sorteddata)
names(no_na) <- pruned.tree$tip.label
#  pruned.tree <- multi2di(pruned.tree, random = TRUE)
#pruned.tree$edge.length[pruned.tree$edge.length == 0] <- 0.01
#Make the BiSSE function
func <- make.bisse(pruned.tree, no_na)
sp<-starting.point.bisse(pruned.tree)
# Find MLE and use it to do ancestral state reconstruction 
fit_bisse <- find.mle(func, sp)
print(fit_bisse)
st <- asr.marginal(func, coef(fit_bisse))
#Add root states to a vector of states  
ovip_root_vector <- append(ovip_root_vector, c(st[,2][1], 'Oviparity'))
vivip_root_vector <- append(vivip_root_vector, c(st[,2][2], 'Viviparity'))
output_vector <- append(output_vector, c(fit_bisse$par[1:6], fit_bisse$lnLik))
#Plot tree
plot(pruned.tree, show.tip.label=F)
fit_plot <- nodelabels(pie=t(st), piecol=1:2, cex=.5)
#Output various parameters: the model and ancestral states 
}
lapply(output_vector, write, "EXAMLmodel_params.csv", append=TRUE, ncolumns=7)
lapply(ovip_root_vector, write, "EXAMLovip_support.csv", append=TRUE,ncolumns=2)
lapply(vivip_root_vector, write, "EXAMLvivip_support.csv", append=TRUE, ncolumns=2)
}
#Call the function if you want
model_fit(a)
a<- list.files(path='rooted/', pattern="*.txt", full.names=TRUE)
for (x in a){
#For each tree in our vector of trees, read it in and distill down the tree to the shared tips between it and the data set
phy <- read.tree(x)
  phy <- multi2di(phy, random = TRUE)
    f3<-paste(x, ".tre", sep="") 
    write.tree(phy, file=f3)
}
library(ggplot)

data <- read.csv('./bl', row.names=1)
data
m <- ggplot(data, aes(x = Tree.Length))
m
m + geom_density()
m+ geom_density(aes(fill=factor(Method)), size=2)
m+ geom_density(aes(fill=factor(Method)), size=1)
m+ geom_density() + geom_vline(x=108517.25174000063)
m+ geom_density() + geom_vline(x=108517.25174000063, colour = 'teal')
m+ geom_density() + geom_vline(x=108517.25174000063, colour = 'blue')
m+ geom_density() + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(fill='Method, alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(fill='Method, alpha=I(.25)) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(fill='Method, alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(fill='Method, alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(fill='Method', alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m <- ggplot(data, aes(x = Tree.Length, fill=Method))
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = 'blue') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = '"#FF9999"') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = '#FF9999') + geom_vline(x=92039.92632900033, colour='red')
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = '#FF9999') + geom_vline(x=92039.92632900033, colour='#56B4E9')
m+ geom_density(alpha=.25) + geom_vline(x=108517.25174000063, colour = '#FF9999') + geom_vline(x=92039.92632900033, colour='#56B4E9') +theme_bw()
